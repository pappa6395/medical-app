// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema
 
// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
 
generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}
 
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@unique([provider, providerAccountId])
}
 
model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}
 
enum UserRole {
  USER
  ADMIN
  DOCTOR
}

enum DoctorStatus {
  PENDING
  APPROVED
  REJECTED
}
 
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  slug          String   @default("slug")
  email         String   @unique
  phone         String?
  emailVerified DateTime?
  image         String?
  role          UserRole  @default(USER)
  plan          String?
  password      String?
  accounts      Account[]
  sessions      Session[]
  isVerfied     Boolean   @default(false)
  doctorProfile DoctorProfile?
  token         Int?
  serviceId     String? @db.ObjectId
  service       Service? @relation(fields: [serviceId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  specialityId  String? @db.ObjectId
  speciality    Speciality? @relation(fields: [specialityId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  symptomIds    String[]
  provider          String?   // e.g., "google", "email", etc.
  providerAccountId String?  // Google Account ID for easier lookups
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Availability {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId  
  doctorProfileId   String    @db.ObjectId @unique
  doctorProfile     DoctorProfile @relation(fields: [doctorProfileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  monday            String[]
  tuesday           String[]
  wednesday         String[]
  thursday          String[]
  friday            String[]
  saturday          String[]
  sunday            String[]
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}
  

model Service {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  doctors           User[]
  doctorProfile     DoctorProfile[]
  title             String
  slug              String @unique
  imageUrl          String
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Speciality {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  doctors           User[]
  doctorProfile     DoctorProfile[]
  title             String
  slug              String @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Symptom {
  id                String    @id @default(auto()) @map("_id") @db.ObjectId
  title             String
  slug              String @unique
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model Inbox {
  id                  String    @id @default(auto()) @map("_id") @db.ObjectId
  recieverId          String
  senderId            String
  senderName          String
  senderEmail         String
  message             String
  subject             String
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model DoctorProfile {
  id                         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId                     String   @db.ObjectId @unique
  user                       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  availability               Availability?
  trackingNumber             String   @unique
  status                     DoctorStatus @default(PENDING)
  firstName                  String
  lastName                   String
  middleName                 String?
  dob                        DateTime?
  gender                     String
  page                       String
  medicalLicense             String?
  yearsOfExperience          Int?
  medicalLicenseExpiry       DateTime?
  bio                        String?
  profilePicture             String?
  email                      String?
  phone                      String?
  country                    String?
  city                       String?
  state                      String?
  medicalSchool              String?
  graduationYear             String?
  primarySpecialization      String?
  otherSpecialties           String[]
  boardCertificates          String[]
  hospitalName               String?
  hospitalAddress            String?
  hospitalContactNumber      String?
  hospitalEmailAddress       String?
  hospitalWebsite            String?
  hospitalHoursOfOperation   String?
  servicesOffered            String[]
  insuranceAccepted          String?
  languagesSpoken            String[]
  educationHistory           String?
  research                   String?
  accomplishments            String?
  additionalDocuments        String[]
  operationMode              String?
  hourlyWage                 Int @default(100)

  serviceId                  String?  @db.ObjectId
  service                    Service? @relation(fields: [serviceId], references: [id])
  specialityId               String?  @db.ObjectId
  speciality                 Speciality? @relation(fields: [specialityId], references: [id])
  symptomIds                  String[] @db.ObjectId
  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Appointment {
  id                        String @id @db.ObjectId @default(auto()) @map("_id")
  appointmentDate           DateTime?
  appointmentTime           String?
  appointmentFormattedDate  String
  doctorId                  String?
  doctorName                String?
  patientId                 String?
  fee                       Int

  // Patient information
  firstName                 String?
  lastName                  String?
  email                     String?
  gender                    String?
  phone                     String?
  dob                       DateTime?
  location                  String?
  appointmentReason         String?
  medicalDocument           String[]
  occupation                String?

  status                    String @default("pending")
  meetingLink               String @default("#")
  meetingProvider           String @default("")

  transactionId             String?
  reference                 String?
  paymentStatus             PaymentStatus @default(pending)
  paymentMethod             String?
  paidAmount                Int?
  sale                      Sale[]

  createdAt                 DateTime @default(now())
  updatedAt                 DateTime @updatedAt
}

enum PaymentStatus {
  pending
  success
  failed
}

model Sale {
  id                     String @id @db.ObjectId @default(auto()) @map("_id")
  appointmentId          String @db.ObjectId
  doctorId               String
  doctorName             String
  patientId              String
  patientName            String
  totalAmount            Int
  
  createdAt              DateTime @default(now())
  updatedAt              DateTime @updatedAt

  appointment            Appointment @relation(fields: [appointmentId], references: [id])
}